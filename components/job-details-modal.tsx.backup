"use client"

import { useState } from "react"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { useToast } from "@/hooks/use-toast"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Textarea } from "@/components/ui/textarea"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Job } from "@/lib/job-store"
import { 
  MapPin, 
  Clock, 
  IndianRupee, 
  Users, 
  Calendar, 
  Briefcase, 
  GraduationCap,
  Heart,
  Share2,
  Send,
  CheckCircle,
  FileText,
  Upload,
  Copy,
  ExternalLink
} from "lucide-react"

interface JobDetailsModalProps {
  job: Job | null
  isOpen: boolean
  onClose: () => void
}

export function JobDetailsModal({ job, isOpen, onClose }: JobDetailsModalProps) {
  const { toast } = useToast()
  const [showApplicationForm, setShowApplicationForm] = useState(false)
  const [applicationSubmitted, setApplicationSubmitted] = useState(false)
  const [isLiked, setIsLiked] = useState(false)
  const [likeCount, setLikeCount] = useState(Math.floor(Math.random() * 50) + 10) // Random initial likes
  const [applicationData, setApplicationData] = useState({
    fullName: "",
    email: "",
    phone: "",
    coverLetter: "",
    resume: null as File | null
  })

  if (!job) return null

  const getCompanyLogo = (company: string) => {
    const logoMap: { [key: string]: string } = {
      "Google": "/google-logo.svg",
      "Microsoft": "/microsoft-logo.svg", 
      "Apple": "/apple-logo.svg",
      "Amazon": "/amazon-logo.png",
      "Tesla": "/tesla-logo.png",
      "Netflix": "/netflix-logo.svg",
      "Meta": "/meta-logo.svg",
      "Uber": "/uber-logo.svg",
      "Airbnb": "/airbnb-logo.svg",
      "Spotify": "/spotify-logo.svg",
      "Adobe": "/adobe-logo.svg",
      "Salesforce": "/salesforce-logo.svg",
      "Twitter": "/twitter-logo.svg",
      "LinkedIn": "/linkedin-logo.svg",
      "Stripe": "/stripe-logo.svg",
      "Slack": "/slack-logo.svg",
      "Zoom": "/zoom-logo.svg",
      "Swiggy": "/swiggy-logo-orange.jpg"
    }
    return logoMap[company] || "/placeholder-logo.svg"
  }

  // Like function
  const handleLike = () => {
    const newLikedState = !isLiked
    setIsLiked(newLikedState)
    setLikeCount(prev => newLikedState ? prev + 1 : prev - 1)
    
    toast({
      title: newLikedState ? "Job Liked! ❤️" : "Job Unliked",
      description: newLikedState 
        ? `You liked the ${job.title} position at ${job.company}` 
        : `You removed your like from ${job.title}`,
      duration: 2000,
    })
  }

  // Quick copy link function
  const handleCopyLink = async () => {
    try {
      const jobUrl = `${window.location.origin}/jobs/${job.id}`
      await navigator.clipboard.writeText(jobUrl)
      toast({
        title: "Link Copied! 🔗",
        description: "Job link copied to clipboard",
        duration: 2000,
      })
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Unable to copy link. Please try again.",
        duration: 2000,
      })
    }
  }

  // Share function with multiple options
  const handleShare = async () => {
    const shareData = {
      title: `${job.title} at ${job.company}`,
      text: `🚀 Amazing job opportunity!\n\n${job.title} at ${job.company}\n📍 ${job.location}\n💰 ${job.salary}\n\n${job.description.substring(0, 150)}...`,
      url: `${window.location.origin}/jobs/${job.id}`
    }

    try {
      // Try native Web Share API first (mobile/modern browsers)
      if (navigator.share) {
        await navigator.share(shareData)
        toast({
          title: "Shared Successfully! 🎉",
          description: "Job details shared successfully",
          duration: 3000,
        })
        return
      }
    } catch (error) {
      // User cancelled share or error occurred
    }

    // Fallback: Show share options
    try {
      const shareUrl = encodeURIComponent(shareData.url)
      const shareText = encodeURIComponent(shareData.text)
      
      // Enhanced share menu with more platforms
      const shareOptions = [
        {
          name: 'LinkedIn',
          url: `https://www.linkedin.com/sharing/share-offsite/?url=${shareUrl}`,
          icon: '💼'
        },
        {
          name: 'WhatsApp',
          url: `https://wa.me/?text=${shareText}%20${shareUrl}`,
          icon: '📱'
        },
        {
          name: 'Twitter/X',
          url: `https://twitter.com/intent/tweet?text=${shareText}&url=${shareUrl}`,
          icon: '🐦'
        },
        {
          name: 'Facebook',
          url: `https://www.facebook.com/sharer/sharer.php?u=${shareUrl}`,
          icon: '📘'
        },
        {
          name: 'Telegram',
          url: `https://t.me/share/url?url=${shareUrl}&text=${shareText}`,
          icon: '✈️'
        },
        {
          name: 'Email',
          url: `mailto:?subject=${encodeURIComponent(shareData.title)}&body=${shareText}%20${shareUrl}`,
          icon: '📧'
        }
      ]

      // Create custom share menu (you could implement a proper modal for this)
      const optionText = shareOptions.map((opt, i) => `${i + 1}. ${opt.icon} ${opt.name}`).join('\n')
      const choice = prompt(
        `Choose how to share this job:\n\n${optionText}\n\nEnter number (1-${shareOptions.length}) or press Cancel to copy link:`
      )
      
      const optionIndex = parseInt(choice || '') - 1
      
      if (choice && optionIndex >= 0 && optionIndex < shareOptions.length) {
        // Open selected share platform
        window.open(shareOptions[optionIndex].url, '_blank', 'width=600,height=400')
        toast({
          title: `Sharing via ${shareOptions[optionIndex].name}! 🚀`,
          description: "Opening share window...",
          duration: 3000,
        })
      } else {
        // Copy to clipboard as fallback
        await navigator.clipboard.writeText(`${shareData.title}\n\n${shareData.text}\n\n${shareData.url}`)
        toast({
          title: "Link Copied! 📋",
          description: "Job details copied to clipboard. You can now paste and share anywhere!",
          duration: 4000,
        })
      }
    } catch (error) {
      // Final fallback if clipboard fails
      toast({
        title: "Share Job Opportunity",
        description: `${shareData.title} - ${shareData.url}`,
        duration: 5000,
      })
    }
  }

  const handleApplicationSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // Simulate application submission
    setApplicationSubmitted(true)
    setTimeout(() => {
      setShowApplicationForm(false)
      setApplicationSubmitted(false)
      onClose()
    }, 2000)
  }

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      setApplicationData(prev => ({ ...prev, resume: file }))
    }
  }

  const jobRequirements = [
    "Bachelor's degree in Computer Science or related field",
    `${job.experience} years of professional experience`,
    "Strong problem-solving and analytical skills",
    "Experience with modern development frameworks",
    "Excellent communication and teamwork abilities",
    "Knowledge of software development best practices",
    "Experience with version control systems (Git)",
    "Understanding of database design and optimization"
  ]

  const responsibilities = [
    "Design and develop high-quality software solutions",
    "Collaborate with cross-functional teams to deliver projects",
    "Participate in code reviews and maintain code quality",
    "Troubleshoot and debug complex technical issues",
    "Contribute to architectural decisions and technical planning",
    "Mentor junior team members and share knowledge",
    "Stay updated with latest technologies and industry trends",
    "Participate in agile development processes"
  ]

  const benefits = [
    "Competitive salary and equity package",
    "Comprehensive health, dental, and vision insurance",
    "Flexible work arrangements and remote options",
    "Professional development and learning opportunities",
    "Generous PTO and sabbatical programs",
    "State-of-the-art equipment and workspace",
    "Team building events and company retreats",
    "Wellness programs and mental health support"
  ]

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-5xl max-h-[90vh] overflow-y-auto">
        {!showApplicationForm && !applicationSubmitted ? (
          <div>
            <DialogHeader>
              <div className="flex items-start space-x-4">
                <Avatar className="h-16 w-16">
                  <AvatarImage src={getCompanyLogo(job.company)} alt={job.company} />
                  <AvatarFallback>{job.company[0]}</AvatarFallback>
                </Avatar>
                <div className="flex-1">
                  <DialogTitle className="text-2xl font-bold text-foreground mb-2">
                    {job.title}
                  </DialogTitle>
                  <div className="flex items-center space-x-4 text-muted-foreground mb-4">
                    <span className="font-semibold text-primary">{job.company}</span>
                    <div className="flex items-center space-x-1">
                      <MapPin className="h-4 w-4" />
                      <span>{job.location}</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <Clock className="h-4 w-4" />
                      <span>{job.jobType}</span>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Badge variant="secondary">{job.jobType}</Badge>
                    <Badge variant="outline">{job.experience}</Badge>
                    <Badge variant="outline" className="text-green-600">
                      <IndianRupee className="h-3 w-3 mr-1" />
                      {job.salary}
                    </Badge>
                  </div>
                </div>
                <div className="flex space-x-2">
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={handleLike}
                    className={`transition-colors ${isLiked ? 'text-red-500 border-red-200 bg-red-50 hover:bg-red-100' : 'hover:text-red-500'}`}
                  >
                    <Heart className={`h-4 w-4 mr-1 ${isLiked ? 'fill-current' : ''}`} />
                    {likeCount}
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={handleShare}
                    className="hover:text-blue-500 hover:border-blue-200"
                  >
                    <Share2 className="h-4 w-4 mr-1" />
                    Share
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={handleCopyLink}
                    className="hover:text-green-500 hover:border-green-200"
                    title="Copy job link"
                  >
                    <Copy className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </DialogHeader>

            <div className="mt-6 space-y-6">
              {/* Job Overview */}
              <Card className="p-6">
                <h3 className="text-lg font-semibold text-foreground mb-4">Job Overview</h3>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="text-center">
                    <div className="h-10 w-10 bg-blue-100 dark:bg-blue-900/20 rounded-full flex items-center justify-center mx-auto mb-2">
                      <Briefcase className="h-5 w-5 text-blue-600" />
                    </div>
                    <div className="text-xs text-muted-foreground">Experience</div>
                    <div className="font-semibold">{job.experience}</div>
                  </div>
                  <div className="text-center">
                    <div className="h-10 w-10 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto mb-2">
                      <IndianRupee className="h-5 w-5 text-green-600" />
                    </div>
                    <div className="text-xs text-muted-foreground">Salary</div>
                    <div className="font-semibold">{job.salary}</div>
                  </div>
                  <div className="text-center">
                    <div className="h-10 w-10 bg-purple-100 dark:bg-purple-900/20 rounded-full flex items-center justify-center mx-auto mb-2">
                      <Users className="h-5 w-5 text-purple-600" />
                    </div>
                    <div className="text-xs text-muted-foreground">Job Type</div>
                    <div className="font-semibold">{job.jobType}</div>
                  </div>
                  <div className="text-center">
                    <div className="h-10 w-10 bg-orange-100 dark:bg-orange-900/20 rounded-full flex items-center justify-center mx-auto mb-2">
                      <Calendar className="h-5 w-5 text-orange-600" />
                    </div>
                    <div className="text-xs text-muted-foreground">Posted</div>
                    <div className="font-semibold">{job.postedTime}</div>
                  </div>
                </div>
              </Card>

              {/* Job Description */}
              <div>
                <h3 className="text-lg font-semibold text-foreground mb-4">Job Description</h3>
                <div className="text-muted-foreground space-y-3">
                  <p>
                    We are seeking a talented {job.title} to join our team at {job.company}. 
                    This is an exciting opportunity to work with cutting-edge technology and contribute to 
                    innovative projects that impact millions of users worldwide.
                  </p>
                  <p>
                    In this role, you will be responsible for designing, developing, and maintaining high-quality 
                    software solutions. You'll work closely with cross-functional teams including product managers, 
                    designers, and other engineers to deliver exceptional user experiences.
                  </p>
                  <p>
                    We're looking for someone who is passionate about technology, enjoys solving complex problems, 
                    and thrives in a collaborative environment. This position offers excellent growth opportunities 
                    and the chance to work on meaningful projects.
                  </p>
                </div>
              </div>

              {/* Key Responsibilities */}
              <div>
                <h3 className="text-lg font-semibold text-foreground mb-4">Key Responsibilities</h3>
                <ul className="space-y-2">
                  {responsibilities.map((responsibility, index) => (
                    <li key={index} className="flex items-start space-x-2">
                      <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                      <span className="text-muted-foreground text-sm">{responsibility}</span>
                    </li>
                  ))}
                </ul>
              </div>

              {/* Requirements */}
              <div>
                <h3 className="text-lg font-semibold text-foreground mb-4">Requirements</h3>
                <ul className="space-y-2">
                  {jobRequirements.map((requirement, index) => (
                    <li key={index} className="flex items-start space-x-2">
                      <GraduationCap className="h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0" />
                      <span className="text-muted-foreground text-sm">{requirement}</span>
                    </li>
                  ))}
                </ul>
              </div>

              {/* Benefits */}
              <div>
                <h3 className="text-lg font-semibold text-foreground mb-4">Benefits & Perks</h3>
                <ul className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  {benefits.map((benefit, index) => (
                    <li key={index} className="flex items-start space-x-2">
                      <CheckCircle className="h-4 w-4 text-green-500 mt-0.5 flex-shrink-0" />
                      <span className="text-muted-foreground text-sm">{benefit}</span>
                    </li>
                  ))}
                </ul>
              </div>

              <Separator />

              {/* Apply Section */}
              <div className="flex items-center justify-between pt-4">
                <div>
                  <p className="text-sm text-muted-foreground">
                    Ready to join {job.company}? Apply now and we'll get back to you within 48 hours.
                  </p>
                </div>
                <Button 
                  onClick={() => setShowApplicationForm(true)}
                  className="px-8"
                >
                  <Send className="h-4 w-4 mr-2" />
                  Apply Now
                </Button>
              </div>
            </div>
          </div>
          
          {/* Application Form within Job Details */}
          {showApplicationForm && (
            <div className="mt-8 border-t pt-6">
              <Card className="p-6">
                <div className="mb-4">
                  <h3 className="text-xl font-bold text-foreground mb-2">
                    Apply for {job.title}
                  </h3>
                  <p className="text-sm text-muted-foreground">
                    Fill out the form below to submit your application. All fields marked with * are required.
                  </p>
                </div>

            <form onSubmit={handleApplicationSubmit} className="mt-6 space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="fullName">Full Name *</Label>
                  <Input
                    id="fullName"
                    value={applicationData.fullName}
                    onChange={(e) => setApplicationData(prev => ({ ...prev, fullName: e.target.value }))}
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="email">Email *</Label>
                  <Input
                    id="email"
                    type="email"
                    value={applicationData.email}
                    onChange={(e) => setApplicationData(prev => ({ ...prev, email: e.target.value }))}
                    required
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="phone">Phone Number</Label>
                <Input
                  id="phone"
                  value={applicationData.phone}
                  onChange={(e) => setApplicationData(prev => ({ ...prev, phone: e.target.value }))}
                />
              </div>

              <div>
                <Label htmlFor="resume">Resume/CV *</Label>
                <div className="mt-2">
                  <Input
                    id="resume"
                    type="file"
                    accept=".pdf,.doc,.docx"
                    onChange={handleFileUpload}
                    required
                  />
                  {applicationData.resume && (
                    <div className="mt-2 flex items-center space-x-2 text-sm text-muted-foreground">
                      <FileText className="h-4 w-4" />
                      <span>{applicationData.resume.name}</span>
                    </div>
                  )}
                </div>
              </div>

              <div>
                <Label htmlFor="coverLetter">Cover Letter</Label>
                <Textarea
                  id="coverLetter"
                  placeholder="Tell us why you're interested in this position and what makes you a great fit..."
                  rows={6}
                  value={applicationData.coverLetter}
                  onChange={(e) => setApplicationData(prev => ({ ...prev, coverLetter: e.target.value }))}
                />
              </div>

              <div className="flex items-center justify-between pt-4">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setShowApplicationForm(false)}
                >
                  Back to Job Details
                </Button>
                <Button type="submit">
                  <Send className="h-4 w-4 mr-2" />
                  Submit Application
                </Button>
              </div>
            </form>
          </div>
        ) : (
          <div className="text-center py-12">
            <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
            <h3 className="text-2xl font-bold text-foreground mb-2">Application Submitted!</h3>
            <p className="text-muted-foreground">
              Thank you for applying to {job.title} at {job.company}. 
              We'll review your application and get back to you within 48 hours.
            </p>
          </div>
        )}
      </DialogContent>
    </Dialog>
  )
}